// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: flow2d.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "header.capnp.h"
#include "image.capnp.h"
#include "vector2.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(82fff9a03fb96224);
CAPNP_DECLARE_SCHEMA(9819f93049d7bd4d);
CAPNP_DECLARE_SCHEMA(82154ed4078968f9);
enum class DistanceEstimationMethod_82154ed4078968f9: uint16_t {
  SINGLE_FRAME_STEREO,
  MOTION_STEREO,
};
CAPNP_DECLARE_ENUM(DistanceEstimationMethod, 82154ed4078968f9);
CAPNP_DECLARE_SCHEMA(e3a2209336c85d95);
CAPNP_DECLARE_SCHEMA(b51932346219881a);
enum class DetectorMethod_b51932346219881a: uint16_t {
  FAST,
  SPARSE_STEREO,
};
CAPNP_DECLARE_ENUM(DetectorMethod, b51932346219881a);
CAPNP_DECLARE_SCHEMA(fc8a2516cde71c21);
CAPNP_DECLARE_SCHEMA(c1e1087c5a2ddbc8);

}  // namespace schemas
}  // namespace capnp

namespace vkc {

struct Flow2dTrack {
  Flow2dTrack() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82fff9a03fb96224, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DistanceEstimation {
  DistanceEstimation() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DistanceEstimationMethod_82154ed4078968f9 DistanceEstimationMethod;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9819f93049d7bd4d, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Flow2d {
  Flow2d() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::DetectorMethod_b51932346219881a DetectorMethod;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3a2209336c85d95, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HFOpticalFlowResult {
  HFOpticalFlowResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc8a2516cde71c21, 0, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HFSparseStereoResult {
  HFSparseStereoResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1e1087c5a2ddbc8, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Flow2dTrack::Reader {
public:
  typedef Flow2dTrack Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSeq() const;

  inline bool hasPosition() const;
  inline  ::vkc::Vector2f::Reader getPosition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Flow2dTrack::Builder {
public:
  typedef Flow2dTrack Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSeq();
  inline void setSeq( ::int32_t value);

  inline bool hasPosition();
  inline  ::vkc::Vector2f::Builder getPosition();
  inline void setPosition( ::vkc::Vector2f::Reader value);
  inline  ::vkc::Vector2f::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::vkc::Vector2f>&& value);
  inline ::capnp::Orphan< ::vkc::Vector2f> disownPosition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Flow2dTrack::Pipeline {
public:
  typedef Flow2dTrack Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Vector2f::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DistanceEstimation::Reader {
public:
  typedef DistanceEstimation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::vkc::DistanceEstimation::DistanceEstimationMethod getMethod() const;

  inline float getDistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DistanceEstimation::Builder {
public:
  typedef DistanceEstimation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::vkc::DistanceEstimation::DistanceEstimationMethod getMethod();
  inline void setMethod( ::vkc::DistanceEstimation::DistanceEstimationMethod value);

  inline float getDistance();
  inline void setDistance(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DistanceEstimation::Pipeline {
public:
  typedef DistanceEstimation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Flow2d::Reader {
public:
  typedef Flow2d Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasPosition() const;
  inline  ::vkc::Vector2f::Reader getPosition() const;

  inline float getRadial() const;

  inline float getAzimuth() const;

  inline  ::uint8_t getLevel() const;

  inline  ::uint32_t getAge() const;

  inline bool hasHistory() const;
  inline  ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Reader getHistory() const;

  inline  ::vkc::Flow2d::DetectorMethod getDetectorMethod() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Flow2d::Builder {
public:
  typedef Flow2d Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasPosition();
  inline  ::vkc::Vector2f::Builder getPosition();
  inline void setPosition( ::vkc::Vector2f::Reader value);
  inline  ::vkc::Vector2f::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::vkc::Vector2f>&& value);
  inline ::capnp::Orphan< ::vkc::Vector2f> disownPosition();

  inline float getRadial();
  inline void setRadial(float value);

  inline float getAzimuth();
  inline void setAzimuth(float value);

  inline  ::uint8_t getLevel();
  inline void setLevel( ::uint8_t value);

  inline  ::uint32_t getAge();
  inline void setAge( ::uint32_t value);

  inline bool hasHistory();
  inline  ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Builder getHistory();
  inline void setHistory( ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Builder initHistory(unsigned int size);
  inline void adoptHistory(::capnp::Orphan< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>> disownHistory();

  inline  ::vkc::Flow2d::DetectorMethod getDetectorMethod();
  inline void setDetectorMethod( ::vkc::Flow2d::DetectorMethod value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Flow2d::Pipeline {
public:
  typedef Flow2d Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Vector2f::Pipeline getPosition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HFOpticalFlowResult::Reader {
public:
  typedef HFOpticalFlowResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::vkc::Header::Reader getHeader() const;

  inline bool hasStreamName() const;
  inline  ::capnp::Text::Reader getStreamName() const;

  inline bool hasMeanFlow() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getMeanFlow() const;

  inline bool hasFlowDensity() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getFlowDensity() const;

  inline bool hasFlowData() const;
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader getFlowData() const;

  inline bool hasImage() const;
  inline  ::vkc::Image::Reader getImage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HFOpticalFlowResult::Builder {
public:
  typedef HFOpticalFlowResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::vkc::Header::Builder getHeader();
  inline void setHeader( ::vkc::Header::Reader value);
  inline  ::vkc::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::vkc::Header>&& value);
  inline ::capnp::Orphan< ::vkc::Header> disownHeader();

  inline bool hasStreamName();
  inline  ::capnp::Text::Builder getStreamName();
  inline void setStreamName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStreamName(unsigned int size);
  inline void adoptStreamName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStreamName();

  inline bool hasMeanFlow();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getMeanFlow();
  inline void setMeanFlow( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMeanFlow(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initMeanFlow(unsigned int size);
  inline void adoptMeanFlow(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownMeanFlow();

  inline bool hasFlowDensity();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getFlowDensity();
  inline void setFlowDensity( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFlowDensity(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initFlowDensity(unsigned int size);
  inline void adoptFlowDensity(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownFlowDensity();

  inline bool hasFlowData();
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder getFlowData();
  inline void setFlowData( ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder initFlowData(unsigned int size);
  inline void adoptFlowData(::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>> disownFlowData();

  inline bool hasImage();
  inline  ::vkc::Image::Builder getImage();
  inline void setImage( ::vkc::Image::Reader value);
  inline  ::vkc::Image::Builder initImage();
  inline void adoptImage(::capnp::Orphan< ::vkc::Image>&& value);
  inline ::capnp::Orphan< ::vkc::Image> disownImage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HFOpticalFlowResult::Pipeline {
public:
  typedef HFOpticalFlowResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Header::Pipeline getHeader();
  inline  ::vkc::Image::Pipeline getImage();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HFSparseStereoResult::Reader {
public:
  typedef HFSparseStereoResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::vkc::Header::Reader getHeader() const;

  inline bool hasStreamName() const;
  inline  ::capnp::Text::Reader getStreamName() const;

  inline bool hasFiducialCorners() const;
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader getFiducialCorners() const;

  inline bool hasMatchedCorners() const;
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader getMatchedCorners() const;

  inline bool hasFilteredCorners() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getFilteredCorners() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HFSparseStereoResult::Builder {
public:
  typedef HFSparseStereoResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::vkc::Header::Builder getHeader();
  inline void setHeader( ::vkc::Header::Reader value);
  inline  ::vkc::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::vkc::Header>&& value);
  inline ::capnp::Orphan< ::vkc::Header> disownHeader();

  inline bool hasStreamName();
  inline  ::capnp::Text::Builder getStreamName();
  inline void setStreamName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStreamName(unsigned int size);
  inline void adoptStreamName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStreamName();

  inline bool hasFiducialCorners();
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder getFiducialCorners();
  inline void setFiducialCorners( ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder initFiducialCorners(unsigned int size);
  inline void adoptFiducialCorners(::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>> disownFiducialCorners();

  inline bool hasMatchedCorners();
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder getMatchedCorners();
  inline void setMatchedCorners( ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder initMatchedCorners(unsigned int size);
  inline void adoptMatchedCorners(::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>> disownMatchedCorners();

  inline bool hasFilteredCorners();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getFilteredCorners();
  inline void setFilteredCorners( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFilteredCorners(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initFilteredCorners(unsigned int size);
  inline void adoptFilteredCorners(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownFilteredCorners();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HFSparseStereoResult::Pipeline {
public:
  typedef HFSparseStereoResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Header::Pipeline getHeader();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t Flow2dTrack::Reader::getSeq() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Flow2dTrack::Builder::getSeq() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Flow2dTrack::Builder::setSeq( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Flow2dTrack::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Flow2dTrack::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector2f::Reader Flow2dTrack::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector2f::Builder Flow2dTrack::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector2f::Pipeline Flow2dTrack::Pipeline::getPosition() {
  return  ::vkc::Vector2f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Flow2dTrack::Builder::setPosition( ::vkc::Vector2f::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector2f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector2f::Builder Flow2dTrack::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Flow2dTrack::Builder::adoptPosition(
    ::capnp::Orphan< ::vkc::Vector2f>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector2f> Flow2dTrack::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::vkc::DistanceEstimation::DistanceEstimationMethod DistanceEstimation::Reader::getMethod() const {
  return _reader.getDataField< ::vkc::DistanceEstimation::DistanceEstimationMethod>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::vkc::DistanceEstimation::DistanceEstimationMethod DistanceEstimation::Builder::getMethod() {
  return _builder.getDataField< ::vkc::DistanceEstimation::DistanceEstimationMethod>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DistanceEstimation::Builder::setMethod( ::vkc::DistanceEstimation::DistanceEstimationMethod value) {
  _builder.setDataField< ::vkc::DistanceEstimation::DistanceEstimationMethod>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float DistanceEstimation::Reader::getDistance() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float DistanceEstimation::Builder::getDistance() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DistanceEstimation::Builder::setDistance(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Flow2d::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Flow2d::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Flow2d::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Flow2d::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Flow2d::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector2f::Reader Flow2d::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector2f::Builder Flow2d::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector2f::Pipeline Flow2d::Pipeline::getPosition() {
  return  ::vkc::Vector2f::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Flow2d::Builder::setPosition( ::vkc::Vector2f::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector2f>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector2f::Builder Flow2d::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Flow2d::Builder::adoptPosition(
    ::capnp::Orphan< ::vkc::Vector2f>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector2f>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector2f> Flow2d::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector2f>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float Flow2d::Reader::getRadial() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Flow2d::Builder::getRadial() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Flow2d::Builder::setRadial(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Flow2d::Reader::getAzimuth() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Flow2d::Builder::getAzimuth() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Flow2d::Builder::setAzimuth(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Flow2d::Reader::getLevel() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Flow2d::Builder::getLevel() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Flow2d::Builder::setLevel( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Flow2d::Reader::getAge() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Flow2d::Builder::getAge() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Flow2d::Builder::setAge( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Flow2d::Reader::hasHistory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Flow2d::Builder::hasHistory() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Reader Flow2d::Reader::getHistory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Builder Flow2d::Builder::getHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Flow2d::Builder::setHistory( ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>::Builder Flow2d::Builder::initHistory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Flow2d::Builder::adoptHistory(
    ::capnp::Orphan< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>> Flow2d::Builder::disownHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2dTrack,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::vkc::Flow2d::DetectorMethod Flow2d::Reader::getDetectorMethod() const {
  return _reader.getDataField< ::vkc::Flow2d::DetectorMethod>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::vkc::Flow2d::DetectorMethod Flow2d::Builder::getDetectorMethod() {
  return _builder.getDataField< ::vkc::Flow2d::DetectorMethod>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Flow2d::Builder::setDetectorMethod( ::vkc::Flow2d::DetectorMethod value) {
  _builder.setDataField< ::vkc::Flow2d::DetectorMethod>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool HFOpticalFlowResult::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HFOpticalFlowResult::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Header::Reader HFOpticalFlowResult::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Header::Builder HFOpticalFlowResult::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Header::Pipeline HFOpticalFlowResult::Pipeline::getHeader() {
  return  ::vkc::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HFOpticalFlowResult::Builder::setHeader( ::vkc::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Header::Builder HFOpticalFlowResult::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HFOpticalFlowResult::Builder::adoptHeader(
    ::capnp::Orphan< ::vkc::Header>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Header> HFOpticalFlowResult::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HFOpticalFlowResult::Reader::hasStreamName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HFOpticalFlowResult::Builder::hasStreamName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HFOpticalFlowResult::Reader::getStreamName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HFOpticalFlowResult::Builder::getStreamName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HFOpticalFlowResult::Builder::setStreamName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HFOpticalFlowResult::Builder::initStreamName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void HFOpticalFlowResult::Builder::adoptStreamName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HFOpticalFlowResult::Builder::disownStreamName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool HFOpticalFlowResult::Reader::hasMeanFlow() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool HFOpticalFlowResult::Builder::hasMeanFlow() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader HFOpticalFlowResult::Reader::getMeanFlow() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder HFOpticalFlowResult::Builder::getMeanFlow() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void HFOpticalFlowResult::Builder::setMeanFlow( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void HFOpticalFlowResult::Builder::setMeanFlow(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder HFOpticalFlowResult::Builder::initMeanFlow(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void HFOpticalFlowResult::Builder::adoptMeanFlow(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> HFOpticalFlowResult::Builder::disownMeanFlow() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool HFOpticalFlowResult::Reader::hasFlowDensity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool HFOpticalFlowResult::Builder::hasFlowDensity() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader HFOpticalFlowResult::Reader::getFlowDensity() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder HFOpticalFlowResult::Builder::getFlowDensity() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void HFOpticalFlowResult::Builder::setFlowDensity( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void HFOpticalFlowResult::Builder::setFlowDensity(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder HFOpticalFlowResult::Builder::initFlowDensity(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void HFOpticalFlowResult::Builder::adoptFlowDensity(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> HFOpticalFlowResult::Builder::disownFlowDensity() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool HFOpticalFlowResult::Reader::hasFlowData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool HFOpticalFlowResult::Builder::hasFlowData() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader HFOpticalFlowResult::Reader::getFlowData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder HFOpticalFlowResult::Builder::getFlowData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void HFOpticalFlowResult::Builder::setFlowData( ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder HFOpticalFlowResult::Builder::initFlowData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void HFOpticalFlowResult::Builder::adoptFlowData(
    ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>> HFOpticalFlowResult::Builder::disownFlowData() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool HFOpticalFlowResult::Reader::hasImage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool HFOpticalFlowResult::Builder::hasImage() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Image::Reader HFOpticalFlowResult::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::vkc::Image::Builder HFOpticalFlowResult::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Image::Pipeline HFOpticalFlowResult::Pipeline::getImage() {
  return  ::vkc::Image::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void HFOpticalFlowResult::Builder::setImage( ::vkc::Image::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Image>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Image::Builder HFOpticalFlowResult::Builder::initImage() {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void HFOpticalFlowResult::Builder::adoptImage(
    ::capnp::Orphan< ::vkc::Image>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Image>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Image> HFOpticalFlowResult::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool HFSparseStereoResult::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HFSparseStereoResult::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Header::Reader HFSparseStereoResult::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Header::Builder HFSparseStereoResult::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Header::Pipeline HFSparseStereoResult::Pipeline::getHeader() {
  return  ::vkc::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HFSparseStereoResult::Builder::setHeader( ::vkc::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Header::Builder HFSparseStereoResult::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HFSparseStereoResult::Builder::adoptHeader(
    ::capnp::Orphan< ::vkc::Header>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Header> HFSparseStereoResult::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HFSparseStereoResult::Reader::hasStreamName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HFSparseStereoResult::Builder::hasStreamName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HFSparseStereoResult::Reader::getStreamName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HFSparseStereoResult::Builder::getStreamName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HFSparseStereoResult::Builder::setStreamName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HFSparseStereoResult::Builder::initStreamName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void HFSparseStereoResult::Builder::adoptStreamName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HFSparseStereoResult::Builder::disownStreamName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool HFSparseStereoResult::Reader::hasFiducialCorners() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool HFSparseStereoResult::Builder::hasFiducialCorners() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader HFSparseStereoResult::Reader::getFiducialCorners() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder HFSparseStereoResult::Builder::getFiducialCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void HFSparseStereoResult::Builder::setFiducialCorners( ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder HFSparseStereoResult::Builder::initFiducialCorners(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void HFSparseStereoResult::Builder::adoptFiducialCorners(
    ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>> HFSparseStereoResult::Builder::disownFiducialCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool HFSparseStereoResult::Reader::hasMatchedCorners() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool HFSparseStereoResult::Builder::hasMatchedCorners() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader HFSparseStereoResult::Reader::getMatchedCorners() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder HFSparseStereoResult::Builder::getMatchedCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void HFSparseStereoResult::Builder::setMatchedCorners( ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>::Builder HFSparseStereoResult::Builder::initMatchedCorners(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void HFSparseStereoResult::Builder::adoptMatchedCorners(
    ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>> HFSparseStereoResult::Builder::disownMatchedCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::Flow2d,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool HFSparseStereoResult::Reader::hasFilteredCorners() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool HFSparseStereoResult::Builder::hasFilteredCorners() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader HFSparseStereoResult::Reader::getFilteredCorners() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder HFSparseStereoResult::Builder::getFilteredCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void HFSparseStereoResult::Builder::setFilteredCorners( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void HFSparseStereoResult::Builder::setFilteredCorners(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder HFSparseStereoResult::Builder::initFilteredCorners(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void HFSparseStereoResult::Builder::adoptFilteredCorners(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> HFSparseStereoResult::Builder::disownFilteredCorners() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

