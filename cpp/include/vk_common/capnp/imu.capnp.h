// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: imu.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "header.capnp.h"
#include "sensorextrinsic.capnp.h"
#include "vector3.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e7c064e93078ce49);
CAPNP_DECLARE_SCHEMA(c87772c0e6d92bbf);

}  // namespace schemas
}  // namespace capnp

namespace vkc {

struct ImuInstrinsic {
  ImuInstrinsic() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7c064e93078ce49, 3, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Imu {
  Imu() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c87772c0e6d92bbf, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ImuInstrinsic::Reader {
public:
  typedef ImuInstrinsic Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGyroNoiseStd() const;
  inline  ::vkc::Vector3d::Reader getGyroNoiseStd() const;

  inline bool hasAccelNoiseStd() const;
  inline  ::vkc::Vector3d::Reader getAccelNoiseStd() const;

  inline bool hasGyroBiasStd() const;
  inline  ::vkc::Vector3d::Reader getGyroBiasStd() const;

  inline bool hasAccelBiasStd() const;
  inline  ::vkc::Vector3d::Reader getAccelBiasStd() const;

  inline  ::int32_t getUpdateRate() const;

  inline  ::int64_t getTimeOffsetNs() const;

  inline  ::uint64_t getLastModified() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ImuInstrinsic::Builder {
public:
  typedef ImuInstrinsic Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGyroNoiseStd();
  inline  ::vkc::Vector3d::Builder getGyroNoiseStd();
  inline void setGyroNoiseStd( ::vkc::Vector3d::Reader value);
  inline  ::vkc::Vector3d::Builder initGyroNoiseStd();
  inline void adoptGyroNoiseStd(::capnp::Orphan< ::vkc::Vector3d>&& value);
  inline ::capnp::Orphan< ::vkc::Vector3d> disownGyroNoiseStd();

  inline bool hasAccelNoiseStd();
  inline  ::vkc::Vector3d::Builder getAccelNoiseStd();
  inline void setAccelNoiseStd( ::vkc::Vector3d::Reader value);
  inline  ::vkc::Vector3d::Builder initAccelNoiseStd();
  inline void adoptAccelNoiseStd(::capnp::Orphan< ::vkc::Vector3d>&& value);
  inline ::capnp::Orphan< ::vkc::Vector3d> disownAccelNoiseStd();

  inline bool hasGyroBiasStd();
  inline  ::vkc::Vector3d::Builder getGyroBiasStd();
  inline void setGyroBiasStd( ::vkc::Vector3d::Reader value);
  inline  ::vkc::Vector3d::Builder initGyroBiasStd();
  inline void adoptGyroBiasStd(::capnp::Orphan< ::vkc::Vector3d>&& value);
  inline ::capnp::Orphan< ::vkc::Vector3d> disownGyroBiasStd();

  inline bool hasAccelBiasStd();
  inline  ::vkc::Vector3d::Builder getAccelBiasStd();
  inline void setAccelBiasStd( ::vkc::Vector3d::Reader value);
  inline  ::vkc::Vector3d::Builder initAccelBiasStd();
  inline void adoptAccelBiasStd(::capnp::Orphan< ::vkc::Vector3d>&& value);
  inline ::capnp::Orphan< ::vkc::Vector3d> disownAccelBiasStd();

  inline  ::int32_t getUpdateRate();
  inline void setUpdateRate( ::int32_t value);

  inline  ::int64_t getTimeOffsetNs();
  inline void setTimeOffsetNs( ::int64_t value);

  inline  ::uint64_t getLastModified();
  inline void setLastModified( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ImuInstrinsic::Pipeline {
public:
  typedef ImuInstrinsic Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Vector3d::Pipeline getGyroNoiseStd();
  inline  ::vkc::Vector3d::Pipeline getAccelNoiseStd();
  inline  ::vkc::Vector3d::Pipeline getGyroBiasStd();
  inline  ::vkc::Vector3d::Pipeline getAccelBiasStd();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Imu::Reader {
public:
  typedef Imu Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::vkc::Header::Reader getHeader() const;

  inline bool hasLinearAcceleration() const;
  inline  ::vkc::Vector3d::Reader getLinearAcceleration() const;

  inline bool hasAngularVelocity() const;
  inline  ::vkc::Vector3d::Reader getAngularVelocity() const;

  inline bool hasStreamName() const;
  inline  ::capnp::Text::Reader getStreamName() const;

  inline bool hasIntrinsic() const;
  inline  ::vkc::ImuInstrinsic::Reader getIntrinsic() const;

  inline bool hasExtrinsic() const;
  inline  ::vkc::SensorExtrinsic::Reader getExtrinsic() const;

  inline  ::int32_t getSeqIncrement() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Imu::Builder {
public:
  typedef Imu Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::vkc::Header::Builder getHeader();
  inline void setHeader( ::vkc::Header::Reader value);
  inline  ::vkc::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::vkc::Header>&& value);
  inline ::capnp::Orphan< ::vkc::Header> disownHeader();

  inline bool hasLinearAcceleration();
  inline  ::vkc::Vector3d::Builder getLinearAcceleration();
  inline void setLinearAcceleration( ::vkc::Vector3d::Reader value);
  inline  ::vkc::Vector3d::Builder initLinearAcceleration();
  inline void adoptLinearAcceleration(::capnp::Orphan< ::vkc::Vector3d>&& value);
  inline ::capnp::Orphan< ::vkc::Vector3d> disownLinearAcceleration();

  inline bool hasAngularVelocity();
  inline  ::vkc::Vector3d::Builder getAngularVelocity();
  inline void setAngularVelocity( ::vkc::Vector3d::Reader value);
  inline  ::vkc::Vector3d::Builder initAngularVelocity();
  inline void adoptAngularVelocity(::capnp::Orphan< ::vkc::Vector3d>&& value);
  inline ::capnp::Orphan< ::vkc::Vector3d> disownAngularVelocity();

  inline bool hasStreamName();
  inline  ::capnp::Text::Builder getStreamName();
  inline void setStreamName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStreamName(unsigned int size);
  inline void adoptStreamName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStreamName();

  inline bool hasIntrinsic();
  inline  ::vkc::ImuInstrinsic::Builder getIntrinsic();
  inline void setIntrinsic( ::vkc::ImuInstrinsic::Reader value);
  inline  ::vkc::ImuInstrinsic::Builder initIntrinsic();
  inline void adoptIntrinsic(::capnp::Orphan< ::vkc::ImuInstrinsic>&& value);
  inline ::capnp::Orphan< ::vkc::ImuInstrinsic> disownIntrinsic();

  inline bool hasExtrinsic();
  inline  ::vkc::SensorExtrinsic::Builder getExtrinsic();
  inline void setExtrinsic( ::vkc::SensorExtrinsic::Reader value);
  inline  ::vkc::SensorExtrinsic::Builder initExtrinsic();
  inline void adoptExtrinsic(::capnp::Orphan< ::vkc::SensorExtrinsic>&& value);
  inline ::capnp::Orphan< ::vkc::SensorExtrinsic> disownExtrinsic();

  inline  ::int32_t getSeqIncrement();
  inline void setSeqIncrement( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Imu::Pipeline {
public:
  typedef Imu Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Header::Pipeline getHeader();
  inline  ::vkc::Vector3d::Pipeline getLinearAcceleration();
  inline  ::vkc::Vector3d::Pipeline getAngularVelocity();
  inline  ::vkc::ImuInstrinsic::Pipeline getIntrinsic();
  inline  ::vkc::SensorExtrinsic::Pipeline getExtrinsic();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ImuInstrinsic::Reader::hasGyroNoiseStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ImuInstrinsic::Builder::hasGyroNoiseStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector3d::Reader ImuInstrinsic::Reader::getGyroNoiseStd() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::getGyroNoiseStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector3d::Pipeline ImuInstrinsic::Pipeline::getGyroNoiseStd() {
  return  ::vkc::Vector3d::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ImuInstrinsic::Builder::setGyroNoiseStd( ::vkc::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::initGyroNoiseStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ImuInstrinsic::Builder::adoptGyroNoiseStd(
    ::capnp::Orphan< ::vkc::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector3d> ImuInstrinsic::Builder::disownGyroNoiseStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ImuInstrinsic::Reader::hasAccelNoiseStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ImuInstrinsic::Builder::hasAccelNoiseStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector3d::Reader ImuInstrinsic::Reader::getAccelNoiseStd() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::getAccelNoiseStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector3d::Pipeline ImuInstrinsic::Pipeline::getAccelNoiseStd() {
  return  ::vkc::Vector3d::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ImuInstrinsic::Builder::setAccelNoiseStd( ::vkc::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::initAccelNoiseStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ImuInstrinsic::Builder::adoptAccelNoiseStd(
    ::capnp::Orphan< ::vkc::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector3d> ImuInstrinsic::Builder::disownAccelNoiseStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ImuInstrinsic::Reader::hasGyroBiasStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ImuInstrinsic::Builder::hasGyroBiasStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector3d::Reader ImuInstrinsic::Reader::getGyroBiasStd() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::getGyroBiasStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector3d::Pipeline ImuInstrinsic::Pipeline::getGyroBiasStd() {
  return  ::vkc::Vector3d::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ImuInstrinsic::Builder::setGyroBiasStd( ::vkc::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::initGyroBiasStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ImuInstrinsic::Builder::adoptGyroBiasStd(
    ::capnp::Orphan< ::vkc::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector3d> ImuInstrinsic::Builder::disownGyroBiasStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ImuInstrinsic::Reader::hasAccelBiasStd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ImuInstrinsic::Builder::hasAccelBiasStd() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector3d::Reader ImuInstrinsic::Reader::getAccelBiasStd() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::getAccelBiasStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector3d::Pipeline ImuInstrinsic::Pipeline::getAccelBiasStd() {
  return  ::vkc::Vector3d::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ImuInstrinsic::Builder::setAccelBiasStd( ::vkc::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector3d::Builder ImuInstrinsic::Builder::initAccelBiasStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ImuInstrinsic::Builder::adoptAccelBiasStd(
    ::capnp::Orphan< ::vkc::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector3d> ImuInstrinsic::Builder::disownAccelBiasStd() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int32_t ImuInstrinsic::Reader::getUpdateRate() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ImuInstrinsic::Builder::getUpdateRate() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ImuInstrinsic::Builder::setUpdateRate( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t ImuInstrinsic::Reader::getTimeOffsetNs() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ImuInstrinsic::Builder::getTimeOffsetNs() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ImuInstrinsic::Builder::setTimeOffsetNs( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ImuInstrinsic::Reader::getLastModified() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ImuInstrinsic::Builder::getLastModified() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ImuInstrinsic::Builder::setLastModified( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Imu::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Header::Reader Imu::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Header::Builder Imu::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Header::Pipeline Imu::Pipeline::getHeader() {
  return  ::vkc::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setHeader( ::vkc::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Header::Builder Imu::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptHeader(
    ::capnp::Orphan< ::vkc::Header>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Header> Imu::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasLinearAcceleration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasLinearAcceleration() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector3d::Reader Imu::Reader::getLinearAcceleration() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector3d::Builder Imu::Builder::getLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector3d::Pipeline Imu::Pipeline::getLinearAcceleration() {
  return  ::vkc::Vector3d::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setLinearAcceleration( ::vkc::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector3d::Builder Imu::Builder::initLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptLinearAcceleration(
    ::capnp::Orphan< ::vkc::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector3d> Imu::Builder::disownLinearAcceleration() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasAngularVelocity() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasAngularVelocity() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector3d::Reader Imu::Reader::getAngularVelocity() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector3d::Builder Imu::Builder::getAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector3d::Pipeline Imu::Pipeline::getAngularVelocity() {
  return  ::vkc::Vector3d::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setAngularVelocity( ::vkc::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector3d::Builder Imu::Builder::initAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptAngularVelocity(
    ::capnp::Orphan< ::vkc::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector3d> Imu::Builder::disownAngularVelocity() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasStreamName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasStreamName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Imu::Reader::getStreamName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Imu::Builder::getStreamName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Imu::Builder::setStreamName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Imu::Builder::initStreamName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Imu::Builder::adoptStreamName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Imu::Builder::disownStreamName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasIntrinsic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasIntrinsic() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::ImuInstrinsic::Reader Imu::Reader::getIntrinsic() const {
  return ::capnp::_::PointerHelpers< ::vkc::ImuInstrinsic>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::vkc::ImuInstrinsic::Builder Imu::Builder::getIntrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::ImuInstrinsic>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::ImuInstrinsic::Pipeline Imu::Pipeline::getIntrinsic() {
  return  ::vkc::ImuInstrinsic::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setIntrinsic( ::vkc::ImuInstrinsic::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::ImuInstrinsic>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::vkc::ImuInstrinsic::Builder Imu::Builder::initIntrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::ImuInstrinsic>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptIntrinsic(
    ::capnp::Orphan< ::vkc::ImuInstrinsic>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::ImuInstrinsic>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::ImuInstrinsic> Imu::Builder::disownIntrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::ImuInstrinsic>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Imu::Reader::hasExtrinsic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Imu::Builder::hasExtrinsic() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::SensorExtrinsic::Reader Imu::Reader::getExtrinsic() const {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::vkc::SensorExtrinsic::Builder Imu::Builder::getExtrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::SensorExtrinsic::Pipeline Imu::Pipeline::getExtrinsic() {
  return  ::vkc::SensorExtrinsic::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Imu::Builder::setExtrinsic( ::vkc::SensorExtrinsic::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::vkc::SensorExtrinsic::Builder Imu::Builder::initExtrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Imu::Builder::adoptExtrinsic(
    ::capnp::Orphan< ::vkc::SensorExtrinsic>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::SensorExtrinsic> Imu::Builder::disownExtrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::int32_t Imu::Reader::getSeqIncrement() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Imu::Builder::getSeqIncrement() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Imu::Builder::setSeqIncrement( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace

CAPNP_END_HEADER

