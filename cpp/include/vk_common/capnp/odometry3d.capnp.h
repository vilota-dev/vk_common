// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: odometry3d.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "header.capnp.h"
#include "se3.capnp.h"
#include "twist3.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9928f99e42745410);
CAPNP_DECLARE_SCHEMA(d6f119640d05c3bb);
enum class BodyFrame_d6f119640d05c3bb: uint16_t {
  NWU,
  NED,
};
CAPNP_DECLARE_ENUM(BodyFrame, d6f119640d05c3bb);
CAPNP_DECLARE_SCHEMA(97943a9207456599);
enum class ReferenceFrame_97943a9207456599: uint16_t {
  ENU,
  NWU,
  NED,
};
CAPNP_DECLARE_ENUM(ReferenceFrame, 97943a9207456599);
CAPNP_DECLARE_SCHEMA(fd28eb54a4a5db35);
enum class VelocityFrame_fd28eb54a4a5db35: uint16_t {
  NONE,
  BODY,
  REFERENCE,
};
CAPNP_DECLARE_ENUM(VelocityFrame, fd28eb54a4a5db35);

}  // namespace schemas
}  // namespace capnp

namespace vkc {

struct Odometry3d {
  Odometry3d() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::BodyFrame_d6f119640d05c3bb BodyFrame;

  typedef ::capnp::schemas::ReferenceFrame_97943a9207456599 ReferenceFrame;

  typedef ::capnp::schemas::VelocityFrame_fd28eb54a4a5db35 VelocityFrame;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9928f99e42745410, 3, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Odometry3d::Reader {
public:
  typedef Odometry3d Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::vkc::Header::Reader getHeader() const;

  inline  ::vkc::Odometry3d::BodyFrame getBodyFrame() const;

  inline  ::vkc::Odometry3d::ReferenceFrame getReferenceFrame() const;

  inline  ::vkc::Odometry3d::VelocityFrame getVelocityFrame() const;

  inline bool hasPose() const;
  inline  ::vkc::Se3::Reader getPose() const;

  inline bool hasPoseCovariance() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPoseCovariance() const;

  inline bool hasTwist() const;
  inline  ::vkc::Twist3::Reader getTwist() const;

  inline bool hasTwistCovariance() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTwistCovariance() const;

  inline  ::uint32_t getResetCounter() const;

  inline float getMetricVisionFailureLikelihood() const;

  inline float getEstimatedFailureModeDrift() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Odometry3d::Builder {
public:
  typedef Odometry3d Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::vkc::Header::Builder getHeader();
  inline void setHeader( ::vkc::Header::Reader value);
  inline  ::vkc::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::vkc::Header>&& value);
  inline ::capnp::Orphan< ::vkc::Header> disownHeader();

  inline  ::vkc::Odometry3d::BodyFrame getBodyFrame();
  inline void setBodyFrame( ::vkc::Odometry3d::BodyFrame value);

  inline  ::vkc::Odometry3d::ReferenceFrame getReferenceFrame();
  inline void setReferenceFrame( ::vkc::Odometry3d::ReferenceFrame value);

  inline  ::vkc::Odometry3d::VelocityFrame getVelocityFrame();
  inline void setVelocityFrame( ::vkc::Odometry3d::VelocityFrame value);

  inline bool hasPose();
  inline  ::vkc::Se3::Builder getPose();
  inline void setPose( ::vkc::Se3::Reader value);
  inline  ::vkc::Se3::Builder initPose();
  inline void adoptPose(::capnp::Orphan< ::vkc::Se3>&& value);
  inline ::capnp::Orphan< ::vkc::Se3> disownPose();

  inline bool hasPoseCovariance();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPoseCovariance();
  inline void setPoseCovariance( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPoseCovariance(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPoseCovariance(unsigned int size);
  inline void adoptPoseCovariance(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPoseCovariance();

  inline bool hasTwist();
  inline  ::vkc::Twist3::Builder getTwist();
  inline void setTwist( ::vkc::Twist3::Reader value);
  inline  ::vkc::Twist3::Builder initTwist();
  inline void adoptTwist(::capnp::Orphan< ::vkc::Twist3>&& value);
  inline ::capnp::Orphan< ::vkc::Twist3> disownTwist();

  inline bool hasTwistCovariance();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTwistCovariance();
  inline void setTwistCovariance( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTwistCovariance(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTwistCovariance(unsigned int size);
  inline void adoptTwistCovariance(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTwistCovariance();

  inline  ::uint32_t getResetCounter();
  inline void setResetCounter( ::uint32_t value);

  inline float getMetricVisionFailureLikelihood();
  inline void setMetricVisionFailureLikelihood(float value);

  inline float getEstimatedFailureModeDrift();
  inline void setEstimatedFailureModeDrift(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Odometry3d::Pipeline {
public:
  typedef Odometry3d Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Header::Pipeline getHeader();
  inline  ::vkc::Se3::Pipeline getPose();
  inline  ::vkc::Twist3::Pipeline getTwist();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Odometry3d::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry3d::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Header::Reader Odometry3d::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Header::Builder Odometry3d::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Header::Pipeline Odometry3d::Pipeline::getHeader() {
  return  ::vkc::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Odometry3d::Builder::setHeader( ::vkc::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Header::Builder Odometry3d::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Odometry3d::Builder::adoptHeader(
    ::capnp::Orphan< ::vkc::Header>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Header> Odometry3d::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::vkc::Odometry3d::BodyFrame Odometry3d::Reader::getBodyFrame() const {
  return _reader.getDataField< ::vkc::Odometry3d::BodyFrame>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::vkc::Odometry3d::BodyFrame Odometry3d::Builder::getBodyFrame() {
  return _builder.getDataField< ::vkc::Odometry3d::BodyFrame>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Odometry3d::Builder::setBodyFrame( ::vkc::Odometry3d::BodyFrame value) {
  _builder.setDataField< ::vkc::Odometry3d::BodyFrame>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::vkc::Odometry3d::ReferenceFrame Odometry3d::Reader::getReferenceFrame() const {
  return _reader.getDataField< ::vkc::Odometry3d::ReferenceFrame>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::vkc::Odometry3d::ReferenceFrame Odometry3d::Builder::getReferenceFrame() {
  return _builder.getDataField< ::vkc::Odometry3d::ReferenceFrame>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Odometry3d::Builder::setReferenceFrame( ::vkc::Odometry3d::ReferenceFrame value) {
  _builder.setDataField< ::vkc::Odometry3d::ReferenceFrame>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::vkc::Odometry3d::VelocityFrame Odometry3d::Reader::getVelocityFrame() const {
  return _reader.getDataField< ::vkc::Odometry3d::VelocityFrame>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::vkc::Odometry3d::VelocityFrame Odometry3d::Builder::getVelocityFrame() {
  return _builder.getDataField< ::vkc::Odometry3d::VelocityFrame>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Odometry3d::Builder::setVelocityFrame( ::vkc::Odometry3d::VelocityFrame value) {
  _builder.setDataField< ::vkc::Odometry3d::VelocityFrame>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Odometry3d::Reader::hasPose() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry3d::Builder::hasPose() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Se3::Reader Odometry3d::Reader::getPose() const {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vkc::Se3::Builder Odometry3d::Builder::getPose() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Se3::Pipeline Odometry3d::Pipeline::getPose() {
  return  ::vkc::Se3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Odometry3d::Builder::setPose( ::vkc::Se3::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Se3>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Se3::Builder Odometry3d::Builder::initPose() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Odometry3d::Builder::adoptPose(
    ::capnp::Orphan< ::vkc::Se3>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Se3>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Se3> Odometry3d::Builder::disownPose() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Odometry3d::Reader::hasPoseCovariance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry3d::Builder::hasPoseCovariance() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Odometry3d::Reader::getPoseCovariance() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Odometry3d::Builder::getPoseCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Odometry3d::Builder::setPoseCovariance( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void Odometry3d::Builder::setPoseCovariance(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Odometry3d::Builder::initPoseCovariance(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Odometry3d::Builder::adoptPoseCovariance(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Odometry3d::Builder::disownPoseCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Odometry3d::Reader::hasTwist() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry3d::Builder::hasTwist() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Twist3::Reader Odometry3d::Reader::getTwist() const {
  return ::capnp::_::PointerHelpers< ::vkc::Twist3>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::vkc::Twist3::Builder Odometry3d::Builder::getTwist() {
  return ::capnp::_::PointerHelpers< ::vkc::Twist3>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Twist3::Pipeline Odometry3d::Pipeline::getTwist() {
  return  ::vkc::Twist3::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Odometry3d::Builder::setTwist( ::vkc::Twist3::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Twist3>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Twist3::Builder Odometry3d::Builder::initTwist() {
  return ::capnp::_::PointerHelpers< ::vkc::Twist3>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Odometry3d::Builder::adoptTwist(
    ::capnp::Orphan< ::vkc::Twist3>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Twist3>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Twist3> Odometry3d::Builder::disownTwist() {
  return ::capnp::_::PointerHelpers< ::vkc::Twist3>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Odometry3d::Reader::hasTwistCovariance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Odometry3d::Builder::hasTwistCovariance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Odometry3d::Reader::getTwistCovariance() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Odometry3d::Builder::getTwistCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Odometry3d::Builder::setTwistCovariance( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void Odometry3d::Builder::setTwistCovariance(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Odometry3d::Builder::initTwistCovariance(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Odometry3d::Builder::adoptTwistCovariance(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Odometry3d::Builder::disownTwistCovariance() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::uint32_t Odometry3d::Reader::getResetCounter() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Odometry3d::Builder::getResetCounter() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Odometry3d::Builder::setResetCounter( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float Odometry3d::Reader::getMetricVisionFailureLikelihood() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float Odometry3d::Builder::getMetricVisionFailureLikelihood() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Odometry3d::Builder::setMetricVisionFailureLikelihood(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float Odometry3d::Reader::getEstimatedFailureModeDrift() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Odometry3d::Builder::getEstimatedFailureModeDrift() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Odometry3d::Builder::setEstimatedFailureModeDrift(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

}  // namespace

CAPNP_END_HEADER

