// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: sensorextrinsic.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "se3.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d535a459430a0159);

}  // namespace schemas
}  // namespace capnp

namespace vkc {

struct SensorExtrinsic {
  SensorExtrinsic() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d535a459430a0159, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SensorExtrinsic::Reader {
public:
  typedef SensorExtrinsic Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBodyFrame() const;
  inline  ::vkc::Se3::Reader getBodyFrame() const;

  inline bool hasImuFrame() const;
  inline  ::vkc::Se3::Reader getImuFrame() const;

  inline  ::uint64_t getLastModified() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SensorExtrinsic::Builder {
public:
  typedef SensorExtrinsic Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBodyFrame();
  inline  ::vkc::Se3::Builder getBodyFrame();
  inline void setBodyFrame( ::vkc::Se3::Reader value);
  inline  ::vkc::Se3::Builder initBodyFrame();
  inline void adoptBodyFrame(::capnp::Orphan< ::vkc::Se3>&& value);
  inline ::capnp::Orphan< ::vkc::Se3> disownBodyFrame();

  inline bool hasImuFrame();
  inline  ::vkc::Se3::Builder getImuFrame();
  inline void setImuFrame( ::vkc::Se3::Reader value);
  inline  ::vkc::Se3::Builder initImuFrame();
  inline void adoptImuFrame(::capnp::Orphan< ::vkc::Se3>&& value);
  inline ::capnp::Orphan< ::vkc::Se3> disownImuFrame();

  inline  ::uint64_t getLastModified();
  inline void setLastModified( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SensorExtrinsic::Pipeline {
public:
  typedef SensorExtrinsic Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Se3::Pipeline getBodyFrame();
  inline  ::vkc::Se3::Pipeline getImuFrame();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool SensorExtrinsic::Reader::hasBodyFrame() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SensorExtrinsic::Builder::hasBodyFrame() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Se3::Reader SensorExtrinsic::Reader::getBodyFrame() const {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Se3::Builder SensorExtrinsic::Builder::getBodyFrame() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Se3::Pipeline SensorExtrinsic::Pipeline::getBodyFrame() {
  return  ::vkc::Se3::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SensorExtrinsic::Builder::setBodyFrame( ::vkc::Se3::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Se3>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Se3::Builder SensorExtrinsic::Builder::initBodyFrame() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SensorExtrinsic::Builder::adoptBodyFrame(
    ::capnp::Orphan< ::vkc::Se3>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Se3>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Se3> SensorExtrinsic::Builder::disownBodyFrame() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SensorExtrinsic::Reader::hasImuFrame() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SensorExtrinsic::Builder::hasImuFrame() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Se3::Reader SensorExtrinsic::Reader::getImuFrame() const {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vkc::Se3::Builder SensorExtrinsic::Builder::getImuFrame() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Se3::Pipeline SensorExtrinsic::Pipeline::getImuFrame() {
  return  ::vkc::Se3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SensorExtrinsic::Builder::setImuFrame( ::vkc::Se3::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Se3>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Se3::Builder SensorExtrinsic::Builder::initImuFrame() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SensorExtrinsic::Builder::adoptImuFrame(
    ::capnp::Orphan< ::vkc::Se3>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Se3>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Se3> SensorExtrinsic::Builder::disownImuFrame() {
  return ::capnp::_::PointerHelpers< ::vkc::Se3>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t SensorExtrinsic::Reader::getLastModified() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SensorExtrinsic::Builder::getLastModified() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SensorExtrinsic::Builder::setLastModified( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace

CAPNP_END_HEADER

