// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: se3.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "so3.capnp.h"
#include "vector3.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e178711838d13e43);

}  // namespace schemas
}  // namespace capnp

namespace vkc {

struct Se3 {
  Se3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e178711838d13e43, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Se3::Reader {
public:
  typedef Se3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::vkc::Vector3d::Reader getPosition() const;

  inline bool hasOrientation() const;
  inline  ::vkc::So3::Reader getOrientation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Se3::Builder {
public:
  typedef Se3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::vkc::Vector3d::Builder getPosition();
  inline void setPosition( ::vkc::Vector3d::Reader value);
  inline  ::vkc::Vector3d::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::vkc::Vector3d>&& value);
  inline ::capnp::Orphan< ::vkc::Vector3d> disownPosition();

  inline bool hasOrientation();
  inline  ::vkc::So3::Builder getOrientation();
  inline void setOrientation( ::vkc::So3::Reader value);
  inline  ::vkc::So3::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::vkc::So3>&& value);
  inline ::capnp::Orphan< ::vkc::So3> disownOrientation();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Se3::Pipeline {
public:
  typedef Se3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Vector3d::Pipeline getPosition();
  inline  ::vkc::So3::Pipeline getOrientation();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Se3::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Se3::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Vector3d::Reader Se3::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Vector3d::Builder Se3::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Vector3d::Pipeline Se3::Pipeline::getPosition() {
  return  ::vkc::Vector3d::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Se3::Builder::setPosition( ::vkc::Vector3d::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Vector3d::Builder Se3::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Se3::Builder::adoptPosition(
    ::capnp::Orphan< ::vkc::Vector3d>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Vector3d>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Vector3d> Se3::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::vkc::Vector3d>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Se3::Reader::hasOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Se3::Builder::hasOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::So3::Reader Se3::Reader::getOrientation() const {
  return ::capnp::_::PointerHelpers< ::vkc::So3>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vkc::So3::Builder Se3::Builder::getOrientation() {
  return ::capnp::_::PointerHelpers< ::vkc::So3>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::So3::Pipeline Se3::Pipeline::getOrientation() {
  return  ::vkc::So3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Se3::Builder::setOrientation( ::vkc::So3::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::So3>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vkc::So3::Builder Se3::Builder::initOrientation() {
  return ::capnp::_::PointerHelpers< ::vkc::So3>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Se3::Builder::adoptOrientation(
    ::capnp::Orphan< ::vkc::So3>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::So3>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::So3> Se3::Builder::disownOrientation() {
  return ::capnp::_::PointerHelpers< ::vkc::So3>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

