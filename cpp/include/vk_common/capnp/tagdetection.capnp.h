// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: tagdetection.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "header.capnp.h"
#include "image.capnp.h"
#include "sensorextrinsic.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(af3f13a9d7cb774d);
enum class TagFamily_af3f13a9d7cb774d: uint16_t {
  TAG16H5,
  TAG25H7,
  TAG25H9,
  TAG36H10,
  TAG36H11,
  TAG16H5_BORDER2,
  TAG25H7_BORDER2,
  TAG25H9_BORDER2,
  TAG36H10_BORDER2,
  TAG36H11_BORDER2,
};
CAPNP_DECLARE_ENUM(TagFamily, af3f13a9d7cb774d);
CAPNP_DECLARE_SCHEMA(a1ed21c64493cb11);
CAPNP_DECLARE_SCHEMA(bfb90a3a780a131e);
CAPNP_DECLARE_SCHEMA(c9f56a15d0ac40a1);

}  // namespace schemas
}  // namespace capnp

namespace vkc {

typedef ::capnp::schemas::TagFamily_af3f13a9d7cb774d TagFamily;

struct AprilGrid {
  AprilGrid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1ed21c64493cb11, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TagDetection {
  TagDetection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bfb90a3a780a131e, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TagDetections {
  TagDetections() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9f56a15d0ac40a1, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AprilGrid::Reader {
public:
  typedef AprilGrid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getStartId() const;

  inline  ::int32_t getIncrement() const;

  inline  ::vkc::TagFamily getFamily() const;

  inline  ::uint8_t getTagCols() const;

  inline  ::uint8_t getTagRows() const;

  inline float getTagSpacing() const;

  inline float getTagSize() const;

  inline  ::uint64_t getGridId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AprilGrid::Builder {
public:
  typedef AprilGrid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getStartId();
  inline void setStartId( ::uint32_t value);

  inline  ::int32_t getIncrement();
  inline void setIncrement( ::int32_t value);

  inline  ::vkc::TagFamily getFamily();
  inline void setFamily( ::vkc::TagFamily value);

  inline  ::uint8_t getTagCols();
  inline void setTagCols( ::uint8_t value);

  inline  ::uint8_t getTagRows();
  inline void setTagRows( ::uint8_t value);

  inline float getTagSpacing();
  inline void setTagSpacing(float value);

  inline float getTagSize();
  inline void setTagSize(float value);

  inline  ::uint64_t getGridId();
  inline void setGridId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AprilGrid::Pipeline {
public:
  typedef AprilGrid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TagDetection::Reader {
public:
  typedef TagDetection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId() const;

  inline  ::vkc::TagFamily getFamily() const;

  inline  ::uint8_t getHammingDistance() const;

  inline bool hasPointsPolygon() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getPointsPolygon() const;

  inline  ::uint64_t getGridId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TagDetection::Builder {
public:
  typedef TagDetection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getId();
  inline void setId( ::uint32_t value);

  inline  ::vkc::TagFamily getFamily();
  inline void setFamily( ::vkc::TagFamily value);

  inline  ::uint8_t getHammingDistance();
  inline void setHammingDistance( ::uint8_t value);

  inline bool hasPointsPolygon();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getPointsPolygon();
  inline void setPointsPolygon( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPointsPolygon(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initPointsPolygon(unsigned int size);
  inline void adoptPointsPolygon(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownPointsPolygon();

  inline  ::uint64_t getGridId();
  inline void setGridId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TagDetection::Pipeline {
public:
  typedef TagDetection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TagDetections::Reader {
public:
  typedef TagDetections Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeader() const;
  inline  ::vkc::Header::Reader getHeader() const;

  inline bool hasCameraExtrinsic() const;
  inline  ::vkc::SensorExtrinsic::Reader getCameraExtrinsic() const;

  inline bool hasImage() const;
  inline  ::vkc::Image::Reader getImage() const;

  inline bool hasTags() const;
  inline  ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Reader getTags() const;

  inline bool hasGrids() const;
  inline  ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Reader getGrids() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TagDetections::Builder {
public:
  typedef TagDetections Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeader();
  inline  ::vkc::Header::Builder getHeader();
  inline void setHeader( ::vkc::Header::Reader value);
  inline  ::vkc::Header::Builder initHeader();
  inline void adoptHeader(::capnp::Orphan< ::vkc::Header>&& value);
  inline ::capnp::Orphan< ::vkc::Header> disownHeader();

  inline bool hasCameraExtrinsic();
  inline  ::vkc::SensorExtrinsic::Builder getCameraExtrinsic();
  inline void setCameraExtrinsic( ::vkc::SensorExtrinsic::Reader value);
  inline  ::vkc::SensorExtrinsic::Builder initCameraExtrinsic();
  inline void adoptCameraExtrinsic(::capnp::Orphan< ::vkc::SensorExtrinsic>&& value);
  inline ::capnp::Orphan< ::vkc::SensorExtrinsic> disownCameraExtrinsic();

  inline bool hasImage();
  inline  ::vkc::Image::Builder getImage();
  inline void setImage( ::vkc::Image::Reader value);
  inline  ::vkc::Image::Builder initImage();
  inline void adoptImage(::capnp::Orphan< ::vkc::Image>&& value);
  inline ::capnp::Orphan< ::vkc::Image> disownImage();

  inline bool hasTags();
  inline  ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Builder getTags();
  inline void setTags( ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Builder initTags(unsigned int size);
  inline void adoptTags(::capnp::Orphan< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>> disownTags();

  inline bool hasGrids();
  inline  ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Builder getGrids();
  inline void setGrids( ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Builder initGrids(unsigned int size);
  inline void adoptGrids(::capnp::Orphan< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>> disownGrids();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TagDetections::Pipeline {
public:
  typedef TagDetections Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vkc::Header::Pipeline getHeader();
  inline  ::vkc::SensorExtrinsic::Pipeline getCameraExtrinsic();
  inline  ::vkc::Image::Pipeline getImage();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t AprilGrid::Reader::getStartId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AprilGrid::Builder::getStartId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setStartId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AprilGrid::Reader::getIncrement() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AprilGrid::Builder::getIncrement() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setIncrement( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::vkc::TagFamily AprilGrid::Reader::getFamily() const {
  return _reader.getDataField< ::vkc::TagFamily>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::vkc::TagFamily AprilGrid::Builder::getFamily() {
  return _builder.getDataField< ::vkc::TagFamily>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setFamily( ::vkc::TagFamily value) {
  _builder.setDataField< ::vkc::TagFamily>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AprilGrid::Reader::getTagCols() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AprilGrid::Builder::getTagCols() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setTagCols( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AprilGrid::Reader::getTagRows() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t AprilGrid::Builder::getTagRows() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setTagRows( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float AprilGrid::Reader::getTagSpacing() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float AprilGrid::Builder::getTagSpacing() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setTagSpacing(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float AprilGrid::Reader::getTagSize() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float AprilGrid::Builder::getTagSize() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setTagSize(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t AprilGrid::Reader::getGridId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t AprilGrid::Builder::getGridId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AprilGrid::Builder::setGridId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t TagDetection::Reader::getId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TagDetection::Builder::getId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TagDetection::Builder::setId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::vkc::TagFamily TagDetection::Reader::getFamily() const {
  return _reader.getDataField< ::vkc::TagFamily>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::vkc::TagFamily TagDetection::Builder::getFamily() {
  return _builder.getDataField< ::vkc::TagFamily>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TagDetection::Builder::setFamily( ::vkc::TagFamily value) {
  _builder.setDataField< ::vkc::TagFamily>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TagDetection::Reader::getHammingDistance() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TagDetection::Builder::getHammingDistance() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void TagDetection::Builder::setHammingDistance( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool TagDetection::Reader::hasPointsPolygon() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TagDetection::Builder::hasPointsPolygon() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader TagDetection::Reader::getPointsPolygon() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder TagDetection::Builder::getPointsPolygon() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TagDetection::Builder::setPointsPolygon( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void TagDetection::Builder::setPointsPolygon(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder TagDetection::Builder::initPointsPolygon(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TagDetection::Builder::adoptPointsPolygon(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> TagDetection::Builder::disownPointsPolygon() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t TagDetection::Reader::getGridId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TagDetection::Builder::getGridId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TagDetection::Builder::setGridId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TagDetections::Reader::hasHeader() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TagDetections::Builder::hasHeader() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Header::Reader TagDetections::Reader::getHeader() const {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vkc::Header::Builder TagDetections::Builder::getHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Header::Pipeline TagDetections::Pipeline::getHeader() {
  return  ::vkc::Header::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TagDetections::Builder::setHeader( ::vkc::Header::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Header::Builder TagDetections::Builder::initHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TagDetections::Builder::adoptHeader(
    ::capnp::Orphan< ::vkc::Header>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Header>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Header> TagDetections::Builder::disownHeader() {
  return ::capnp::_::PointerHelpers< ::vkc::Header>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TagDetections::Reader::hasCameraExtrinsic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TagDetections::Builder::hasCameraExtrinsic() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::SensorExtrinsic::Reader TagDetections::Reader::getCameraExtrinsic() const {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::vkc::SensorExtrinsic::Builder TagDetections::Builder::getCameraExtrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::SensorExtrinsic::Pipeline TagDetections::Pipeline::getCameraExtrinsic() {
  return  ::vkc::SensorExtrinsic::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TagDetections::Builder::setCameraExtrinsic( ::vkc::SensorExtrinsic::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vkc::SensorExtrinsic::Builder TagDetections::Builder::initCameraExtrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TagDetections::Builder::adoptCameraExtrinsic(
    ::capnp::Orphan< ::vkc::SensorExtrinsic>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::SensorExtrinsic> TagDetections::Builder::disownCameraExtrinsic() {
  return ::capnp::_::PointerHelpers< ::vkc::SensorExtrinsic>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TagDetections::Reader::hasImage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TagDetections::Builder::hasImage() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::vkc::Image::Reader TagDetections::Reader::getImage() const {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::vkc::Image::Builder TagDetections::Builder::getImage() {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::vkc::Image::Pipeline TagDetections::Pipeline::getImage() {
  return  ::vkc::Image::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TagDetections::Builder::setImage( ::vkc::Image::Reader value) {
  ::capnp::_::PointerHelpers< ::vkc::Image>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::vkc::Image::Builder TagDetections::Builder::initImage() {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TagDetections::Builder::adoptImage(
    ::capnp::Orphan< ::vkc::Image>&& value) {
  ::capnp::_::PointerHelpers< ::vkc::Image>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vkc::Image> TagDetections::Builder::disownImage() {
  return ::capnp::_::PointerHelpers< ::vkc::Image>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TagDetections::Reader::hasTags() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TagDetections::Builder::hasTags() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Reader TagDetections::Reader::getTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Builder TagDetections::Builder::getTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TagDetections::Builder::setTags( ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>::Builder TagDetections::Builder::initTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void TagDetections::Builder::adoptTags(
    ::capnp::Orphan< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>> TagDetections::Builder::disownTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::TagDetection,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TagDetections::Reader::hasGrids() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TagDetections::Builder::hasGrids() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Reader TagDetections::Reader::getGrids() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Builder TagDetections::Builder::getGrids() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TagDetections::Builder::setGrids( ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>::Builder TagDetections::Builder::initGrids(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void TagDetections::Builder::adoptGrids(
    ::capnp::Orphan< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>> TagDetections::Builder::disownGrids() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::vkc::AprilGrid,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

