// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: vector2.capnp

#include "vector2.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<47> b_b1472b6dd45d3316 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22,  51,  93, 212, 109,  43,  71, 177,
     14,   0,   0,   0,   1,   0,   1,   0,
    246,  99, 163, 195, 146, 137, 184, 163,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101,  99, 116, 111, 114,  50,  46,
     99,  97, 112, 110, 112,  58,  86, 101,
     99, 116, 111, 114,  50, 102,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b1472b6dd45d3316 = b_b1472b6dd45d3316.words;
#if !CAPNP_LITE
static const uint16_t m_b1472b6dd45d3316[] = {0, 1};
static const uint16_t i_b1472b6dd45d3316[] = {0, 1};
const ::capnp::_::RawSchema s_b1472b6dd45d3316 = {
  0xb1472b6dd45d3316, b_b1472b6dd45d3316.words, 47, nullptr, m_b1472b6dd45d3316,
  0, 2, i_b1472b6dd45d3316, nullptr, nullptr, { &s_b1472b6dd45d3316, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<47> b_f42a8c72f18a33be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190,  51, 138, 241, 114, 140,  42, 244,
     14,   0,   0,   0,   1,   0,   2,   0,
    246,  99, 163, 195, 146, 137, 184, 163,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101,  99, 116, 111, 114,  50,  46,
     99,  97, 112, 110, 112,  58,  86, 101,
     99, 116, 111, 114,  50, 100,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f42a8c72f18a33be = b_f42a8c72f18a33be.words;
#if !CAPNP_LITE
static const uint16_t m_f42a8c72f18a33be[] = {0, 1};
static const uint16_t i_f42a8c72f18a33be[] = {0, 1};
const ::capnp::_::RawSchema s_f42a8c72f18a33be = {
  0xf42a8c72f18a33be, b_f42a8c72f18a33be.words, 47, nullptr, m_f42a8c72f18a33be,
  0, 2, i_f42a8c72f18a33be, nullptr, nullptr, { &s_f42a8c72f18a33be, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace vkc {

// Vector2f
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Vector2f::_capnpPrivate::dataWordSize;
constexpr uint16_t Vector2f::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Vector2f::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Vector2f::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Vector2d
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Vector2d::_capnpPrivate::dataWordSize;
constexpr uint16_t Vector2d::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Vector2d::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Vector2d::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace

